/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.3
 * source: feoblog.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "./google_protobuf.ts";
export enum ItemType {
    UNKNOWN = 0,
    POST = 1,
    PROFILE = 2,
    COMMENT = 3
}
export class Item extends pb_1.Message {
    constructor(data?: any[] | ({
        timestamp_ms_utc?: number;
        utc_offset_minutes?: number;
    } & (({
        post?: Post;
        profile?: never;
        comment?: never;
    } | {
        post?: never;
        profile?: Profile;
        comment?: never;
    } | {
        post?: never;
        profile?: never;
        comment?: Comment;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[3, 4, 5]]);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp_ms_utc" in data && data.timestamp_ms_utc != undefined) {
                this.timestamp_ms_utc = data.timestamp_ms_utc;
            }
            if ("utc_offset_minutes" in data && data.utc_offset_minutes != undefined) {
                this.utc_offset_minutes = data.utc_offset_minutes;
            }
            if ("post" in data && data.post != undefined) {
                this.post = data.post;
            }
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
            if ("comment" in data && data.comment != undefined) {
                this.comment = data.comment;
            }
        }
    }
    get timestamp_ms_utc() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set timestamp_ms_utc(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get utc_offset_minutes() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set utc_offset_minutes(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get post() {
        return pb_1.Message.getWrapperField(this, Post, 3) as Post;
    }
    set post(value: Post) {
        pb_1.Message.setOneofWrapperField(this, 3, [3, 4, 5], value);
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, Profile, 4) as Profile;
    }
    set profile(value: Profile) {
        pb_1.Message.setOneofWrapperField(this, 4, [3, 4, 5], value);
    }
    get comment() {
        return pb_1.Message.getWrapperField(this, Comment, 5) as Comment;
    }
    set comment(value: Comment) {
        pb_1.Message.setOneofWrapperField(this, 5, [3, 4, 5], value);
    }
    get item_type() {
        const cases: {
            [index: number]: "none" | "post" | "profile" | "comment";
        } = {
            0: "none",
            3: "post",
            4: "profile",
            5: "comment"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
    }
    toObject() {
        const data: {
            timestamp_ms_utc?: number;
            utc_offset_minutes?: number;
            post?: ReturnType<typeof Post.prototype.toObject>;
            profile?: ReturnType<typeof Profile.prototype.toObject>;
            comment?: ReturnType<typeof Comment.prototype.toObject>;
        } = {};
        if (this.timestamp_ms_utc != null) {
            data.timestamp_ms_utc = this.timestamp_ms_utc;
        }
        if (this.utc_offset_minutes != null) {
            data.utc_offset_minutes = this.utc_offset_minutes;
        }
        if (this.post != null) {
            data.post = this.post.toObject();
        }
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        if (this.comment != null) {
            data.comment = this.comment.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.timestamp_ms_utc !== undefined)
            writer.writeInt64(1, this.timestamp_ms_utc);
        if (this.utc_offset_minutes !== undefined)
            writer.writeSint32(2, this.utc_offset_minutes);
        if (this.post !== undefined)
            writer.writeMessage(3, this.post, () => this.post.serialize(writer));
        if (this.profile !== undefined)
            writer.writeMessage(4, this.profile, () => this.profile.serialize(writer));
        if (this.comment !== undefined)
            writer.writeMessage(5, this.comment, () => this.comment.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Item {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Item();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.timestamp_ms_utc = reader.readInt64();
                    break;
                case 2:
                    message.utc_offset_minutes = reader.readSint32();
                    break;
                case 3:
                    reader.readMessage(message.post, () => message.post = Post.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.profile, () => message.profile = Profile.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.comment, () => message.comment = Comment.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Item {
        return Item.deserialize(bytes);
    }
}
export class Post extends pb_1.Message {
    constructor(data?: any[] | {
        title?: string;
        body?: string;
        attachments?: Attachments;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("body" in data && data.body != undefined) {
                this.body = data.body;
            }
            if ("attachments" in data && data.attachments != undefined) {
                this.attachments = data.attachments;
            }
        }
    }
    get title() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get body() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set body(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get attachments() {
        return pb_1.Message.getWrapperField(this, Attachments, 5) as Attachments;
    }
    set attachments(value: Attachments) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    toObject() {
        const data: {
            title?: string;
            body?: string;
            attachments?: ReturnType<typeof Attachments.prototype.toObject>;
        } = {};
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.body != null) {
            data.body = this.body;
        }
        if (this.attachments != null) {
            data.attachments = this.attachments.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.title === "string" && this.title.length)
            writer.writeString(1, this.title);
        if (typeof this.body === "string" && this.body.length)
            writer.writeString(2, this.body);
        if (this.attachments !== undefined)
            writer.writeMessage(5, this.attachments, () => this.attachments.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Post {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Post();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.title = reader.readString();
                    break;
                case 2:
                    message.body = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.attachments, () => message.attachments = Attachments.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Post {
        return Post.deserialize(bytes);
    }
}
export class Profile extends pb_1.Message {
    constructor(data?: any[] | {
        display_name?: string;
        about?: string;
        servers?: Server[];
        follows?: Follow[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("display_name" in data && data.display_name != undefined) {
                this.display_name = data.display_name;
            }
            if ("about" in data && data.about != undefined) {
                this.about = data.about;
            }
            if ("servers" in data && data.servers != undefined) {
                this.servers = data.servers;
            }
            if ("follows" in data && data.follows != undefined) {
                this.follows = data.follows;
            }
        }
    }
    get display_name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set display_name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get about() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set about(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get servers() {
        return pb_1.Message.getRepeatedWrapperField(this, Server, 3) as Server[];
    }
    set servers(value: Server[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get follows() {
        return pb_1.Message.getRepeatedWrapperField(this, Follow, 4) as Follow[];
    }
    set follows(value: Follow[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    toObject() {
        const data: {
            display_name?: string;
            about?: string;
            servers?: ReturnType<typeof Server.prototype.toObject>[];
            follows?: ReturnType<typeof Follow.prototype.toObject>[];
        } = {};
        if (this.display_name != null) {
            data.display_name = this.display_name;
        }
        if (this.about != null) {
            data.about = this.about;
        }
        if (this.servers != null) {
            data.servers = this.servers.map((item: Server) => item.toObject());
        }
        if (this.follows != null) {
            data.follows = this.follows.map((item: Follow) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.display_name === "string" && this.display_name.length)
            writer.writeString(1, this.display_name);
        if (typeof this.about === "string" && this.about.length)
            writer.writeString(2, this.about);
        if (this.servers !== undefined)
            writer.writeRepeatedMessage(3, this.servers, (item: Server) => item.serialize(writer));
        if (this.follows !== undefined)
            writer.writeRepeatedMessage(4, this.follows, (item: Follow) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Profile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Profile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.display_name = reader.readString();
                    break;
                case 2:
                    message.about = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.servers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Server.deserialize(reader), Server));
                    break;
                case 4:
                    reader.readMessage(message.follows, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Follow.deserialize(reader), Follow));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Profile {
        return Profile.deserialize(bytes);
    }
}
export class Comment extends pb_1.Message {
    constructor(data?: any[] | {
        reply_to?: ReplyRef;
        text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("reply_to" in data && data.reply_to != undefined) {
                this.reply_to = data.reply_to;
            }
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
        }
    }
    get reply_to() {
        return pb_1.Message.getWrapperField(this, ReplyRef, 1) as ReplyRef;
    }
    set reply_to(value: ReplyRef) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get text() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            reply_to?: ReturnType<typeof ReplyRef.prototype.toObject>;
            text?: string;
        } = {};
        if (this.reply_to != null) {
            data.reply_to = this.reply_to.toObject();
        }
        if (this.text != null) {
            data.text = this.text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.reply_to !== undefined)
            writer.writeMessage(1, this.reply_to, () => this.reply_to.serialize(writer));
        if (typeof this.text === "string" && this.text.length)
            writer.writeString(2, this.text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Comment {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Comment();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.reply_to, () => message.reply_to = ReplyRef.deserialize(reader));
                    break;
                case 2:
                    message.text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Comment {
        return Comment.deserialize(bytes);
    }
}
export class ReplyRef extends pb_1.Message {
    constructor(data?: any[] | {
        user_id?: UserID;
        signature?: Signature;
        item_type?: ItemType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("signature" in data && data.signature != undefined) {
                this.signature = data.signature;
            }
            if ("item_type" in data && data.item_type != undefined) {
                this.item_type = data.item_type;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getWrapperField(this, UserID, 1) as UserID;
    }
    set user_id(value: UserID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get signature() {
        return pb_1.Message.getWrapperField(this, Signature, 2) as Signature;
    }
    set signature(value: Signature) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get item_type() {
        return pb_1.Message.getField(this, 3) as ItemType;
    }
    set item_type(value: ItemType) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            user_id?: ReturnType<typeof UserID.prototype.toObject>;
            signature?: ReturnType<typeof Signature.prototype.toObject>;
            item_type?: ItemType;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id.toObject();
        }
        if (this.signature != null) {
            data.signature = this.signature.toObject();
        }
        if (this.item_type != null) {
            data.item_type = this.item_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id !== undefined)
            writer.writeMessage(1, this.user_id, () => this.user_id.serialize(writer));
        if (this.signature !== undefined)
            writer.writeMessage(2, this.signature, () => this.signature.serialize(writer));
        if (this.item_type !== undefined)
            writer.writeEnum(3, this.item_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplyRef {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplyRef();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user_id, () => message.user_id = UserID.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.signature, () => message.signature = Signature.deserialize(reader));
                    break;
                case 3:
                    message.item_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReplyRef {
        return ReplyRef.deserialize(bytes);
    }
}
export class Server extends pb_1.Message {
    constructor(data?: any[] | {
        url?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
        }
    }
    get url() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    toObject() {
        const data: {
            url?: string;
        } = {};
        if (this.url != null) {
            data.url = this.url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(1, this.url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Server {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Server();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Server {
        return Server.deserialize(bytes);
    }
}
export class Follow extends pb_1.Message {
    constructor(data?: any[] | {
        user?: UserID;
        display_name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("display_name" in data && data.display_name != undefined) {
                this.display_name = data.display_name;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, UserID, 1) as UserID;
    }
    set user(value: UserID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get display_name() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set display_name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof UserID.prototype.toObject>;
            display_name?: string;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        if (this.display_name != null) {
            data.display_name = this.display_name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user !== undefined)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (typeof this.display_name === "string" && this.display_name.length)
            writer.writeString(2, this.display_name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Follow {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Follow();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = UserID.deserialize(reader));
                    break;
                case 2:
                    message.display_name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Follow {
        return Follow.deserialize(bytes);
    }
}
export class UserID extends pb_1.Message {
    constructor(data?: any[] | {
        bytes?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bytes" in data && data.bytes != undefined) {
                this.bytes = data.bytes;
            }
        }
    }
    get bytes() {
        return pb_1.Message.getField(this, 1) as Uint8Array;
    }
    set bytes(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    toObject() {
        const data: {
            bytes?: Uint8Array;
        } = {};
        if (this.bytes != null) {
            data.bytes = this.bytes;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.bytes !== undefined)
            writer.writeBytes(1, this.bytes);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserID {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserID();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.bytes = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserID {
        return UserID.deserialize(bytes);
    }
}
export class Signature extends pb_1.Message {
    constructor(data?: any[] | {
        bytes?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bytes" in data && data.bytes != undefined) {
                this.bytes = data.bytes;
            }
        }
    }
    get bytes() {
        return pb_1.Message.getField(this, 1) as Uint8Array;
    }
    set bytes(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    toObject() {
        const data: {
            bytes?: Uint8Array;
        } = {};
        if (this.bytes != null) {
            data.bytes = this.bytes;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.bytes !== undefined)
            writer.writeBytes(1, this.bytes);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Signature {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Signature();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.bytes = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Signature {
        return Signature.deserialize(bytes);
    }
}
export class ItemList extends pb_1.Message {
    constructor(data?: any[] | {
        items?: ItemListEntry[];
        no_more_items?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
            if ("no_more_items" in data && data.no_more_items != undefined) {
                this.no_more_items = data.no_more_items;
            }
        }
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, ItemListEntry, 1) as ItemListEntry[];
    }
    set items(value: ItemListEntry[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get no_more_items() {
        return pb_1.Message.getField(this, 2) as boolean;
    }
    set no_more_items(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            items?: ReturnType<typeof ItemListEntry.prototype.toObject>[];
            no_more_items?: boolean;
        } = {};
        if (this.items != null) {
            data.items = this.items.map((item: ItemListEntry) => item.toObject());
        }
        if (this.no_more_items != null) {
            data.no_more_items = this.no_more_items;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.items !== undefined)
            writer.writeRepeatedMessage(1, this.items, (item: ItemListEntry) => item.serialize(writer));
        if (this.no_more_items !== undefined)
            writer.writeBool(2, this.no_more_items);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ItemListEntry.deserialize(reader), ItemListEntry));
                    break;
                case 2:
                    message.no_more_items = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ItemList {
        return ItemList.deserialize(bytes);
    }
}
export class ItemListEntry extends pb_1.Message {
    constructor(data?: any[] | {
        user_id?: UserID;
        signature?: Signature;
        timestamp_ms_utc?: number;
        item_type?: ItemType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("signature" in data && data.signature != undefined) {
                this.signature = data.signature;
            }
            if ("timestamp_ms_utc" in data && data.timestamp_ms_utc != undefined) {
                this.timestamp_ms_utc = data.timestamp_ms_utc;
            }
            if ("item_type" in data && data.item_type != undefined) {
                this.item_type = data.item_type;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getWrapperField(this, UserID, 1) as UserID;
    }
    set user_id(value: UserID) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get signature() {
        return pb_1.Message.getWrapperField(this, Signature, 2) as Signature;
    }
    set signature(value: Signature) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get timestamp_ms_utc() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set timestamp_ms_utc(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get item_type() {
        return pb_1.Message.getField(this, 4) as ItemType;
    }
    set item_type(value: ItemType) {
        pb_1.Message.setField(this, 4, value);
    }
    toObject() {
        const data: {
            user_id?: ReturnType<typeof UserID.prototype.toObject>;
            signature?: ReturnType<typeof Signature.prototype.toObject>;
            timestamp_ms_utc?: number;
            item_type?: ItemType;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id.toObject();
        }
        if (this.signature != null) {
            data.signature = this.signature.toObject();
        }
        if (this.timestamp_ms_utc != null) {
            data.timestamp_ms_utc = this.timestamp_ms_utc;
        }
        if (this.item_type != null) {
            data.item_type = this.item_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id !== undefined)
            writer.writeMessage(1, this.user_id, () => this.user_id.serialize(writer));
        if (this.signature !== undefined)
            writer.writeMessage(2, this.signature, () => this.signature.serialize(writer));
        if (this.timestamp_ms_utc !== undefined)
            writer.writeInt64(3, this.timestamp_ms_utc);
        if (this.item_type !== undefined)
            writer.writeEnum(4, this.item_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemListEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemListEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user_id, () => message.user_id = UserID.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.signature, () => message.signature = Signature.deserialize(reader));
                    break;
                case 3:
                    message.timestamp_ms_utc = reader.readInt64();
                    break;
                case 4:
                    message.item_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ItemListEntry {
        return ItemListEntry.deserialize(bytes);
    }
}
export class Attachments extends pb_1.Message {
    constructor(data?: any[] | {
        file?: File[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("file" in data && data.file != undefined) {
                this.file = data.file;
            }
        }
    }
    get file() {
        return pb_1.Message.getRepeatedWrapperField(this, File, 1) as File[];
    }
    set file(value: File[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    toObject() {
        const data: {
            file?: ReturnType<typeof File.prototype.toObject>[];
        } = {};
        if (this.file != null) {
            data.file = this.file.map((item: File) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.file !== undefined)
            writer.writeRepeatedMessage(1, this.file, (item: File) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Attachments {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Attachments();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.file, () => pb_1.Message.addToRepeatedWrapperField(message, 1, File.deserialize(reader), File));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Attachments {
        return Attachments.deserialize(bytes);
    }
}
export class File extends pb_1.Message {
    constructor(data?: any[] | {
        hash?: Uint8Array;
        size?: number;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hash" in data && data.hash != undefined) {
                this.hash = data.hash;
            }
            if ("size" in data && data.size != undefined) {
                this.size = data.size;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get hash() {
        return pb_1.Message.getField(this, 1) as Uint8Array;
    }
    set hash(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    get size() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set size(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            hash?: Uint8Array;
            size?: number;
            name?: string;
        } = {};
        if (this.hash != null) {
            data.hash = this.hash;
        }
        if (this.size != null) {
            data.size = this.size;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hash !== undefined)
            writer.writeBytes(1, this.hash);
        if (this.size !== undefined)
            writer.writeUint64(2, this.size);
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(3, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): File {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new File();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.hash = reader.readBytes();
                    break;
                case 2:
                    message.size = reader.readUint64();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): File {
        return File.deserialize(bytes);
    }
}
